class Solution {
    public int findKthLargest(int[] nums, int k) {
        return pivot(nums,0,nums.length-1,k-1);
       
    }
    public int pivot(int nums[],int low,int high,int k){
        int pivot=nums[high];
        int pi=partition(nums,pivot,low,high);
        if(k>pi){
            return pivot(nums,low+1,high,k);
        }
        else if(k<pi){
            return pivot(nums,low,pi-1,k);
        }
        else{
            return nums[pi];
        }
    }
    public int partition(int []nums,int pivot,int low,int high){
        int i=low,j=low;
        while(i<=high){
            if(nums[i]>=pivot){
                int temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
                i++;j++;
            }
            else{
                i++;
            }
        }
        return j-1;
    }
}
/*
*******************************************************************************************************************************
//Using Max-heap

 PriorityQueue<Integer> p=new PriorityQueue<Integer>();
        for(int i=0;i<nums.length;i++){
            p.add(nums[i]);
            if(p.size()>k){
                p.remove();
            }
        }
        return p.peek();

*/

//****************************************************************************************************************************
//Kth Smallest in Array
/*



class Solution {
    public int findKthLargest(int[] nums, int k) {
        return pivot(nums,0,nums.length-1,k-1);
       
    }
    public int pivot(int nums[],int low,int high,int k){
        int pivot=nums[high];
        int pi=partition(nums,pivot,low,high);
        if(k>pi){
            return pivot(nums,low+1,high,k);
        }
        else if(k<pi){
            return pivot(nums,low,pi-1,k);
        }
        else{
            return nums[pi];
        }
    }
    public int partition(int []nums,int pivot,int low,int high){
        int i=low,j=low;
        while(i<=high){
            if(nums[i]<=pivot){
                int temp=nums[i];
                nums[i]=nums[j];
                nums[j]=temp;
                i++;j++;
            }
            else{
                i++;
            }
        }
        return j-1;
    }
}
*/
